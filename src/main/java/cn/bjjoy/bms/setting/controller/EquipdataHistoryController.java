package cn.bjjoy.bms.setting.controller;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.poi.xssf.streaming.SXSSFRow;import org.apache.poi.xssf.streaming.SXSSFSheet;import org.apache.poi.xssf.streaming.SXSSFWorkbook;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Description;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import cn.bjjoy.bms.base.ResponseResult;import cn.bjjoy.bms.exception.ControllerException;import cn.bjjoy.bms.setting.dto.CurrentEquipData;import cn.bjjoy.bms.setting.dto.EveryDayData;import cn.bjjoy.bms.setting.entity.User;import cn.bjjoy.bms.setting.persist.model.Equipdata;import cn.bjjoy.bms.setting.service.EquipdataService;import cn.bjjoy.bms.setting.service.EquiptypeService;import cn.bjjoy.bms.util.DataUtils;import cn.bjjoy.bms.util.DateUtils;import cn.bjjoy.bms.util.MapUtils;import cn.bjjoy.bms.util.Page;import cn.bjjoy.bms.util.PageUtils;import cn.bjjoy.bms.util.PoiUtil;import cn.bjjoy.bms.util.Response;import cn.bjjoy.bms.util.StringUtils;import cn.bjjoy.bms.util.UserUtils;/** * 类描述   :  * 创建人	：system * 创建时间 ：2018-09-13 23:02:18 * @version 1.0 */@Controller@CrossOrigin@RequestMapping(value="history")public class EquipdataHistoryController extends BaseController {	Logger logger = LoggerFactory.getLogger(EquipdataHistoryController.class) ;		@Autowired	private EquipdataService equipdataService;		@Autowired	private EquiptypeService equiptypeService;		@Description("-添加")	@RequestMapping(value="save")	public Response save(Equipdata equipdata) throws ControllerException {		equipdataService.save(equipdata);		return Response.success(equipdata.getId());	}		@Description("-删除")	@RequestMapping(value="delete")	public Response delete(String id) throws ControllerException {		if(StringUtils.isEmpty(id))			return Response.error("id不能为空");		equipdataService.deleteOne(id);		return Response.success();	}	@Description("-根据主键查询")	@RequestMapping(value="one")	public Response one(String id) throws ControllerException {		if(StringUtils.isEmpty(id))			return Response.error("id不能为空");		Equipdata equipdata = equipdataService.queryOne(id);		return Response.success(equipdata);	}	    @RequestMapping(value = "/index" )    public String index(@RequestParam Map paramMap , ModelMap modelMap) {		modelMap.addAttribute("parentId", paramMap.containsKey("parentId") ? paramMap.get("parentId") : "1") ;        return "/history/index";    }	@SuppressWarnings({ "unchecked", "rawtypes" })	@Description("-查找最新数据")	@RequestMapping(value="newest")	@ResponseBody	public ResponseResult getNewestData(@RequestParam Map map ,  ModelMap modelMap) throws ControllerException {				Integer rows = Integer.valueOf((String) map.get("rows")) ;		Integer page = Integer.valueOf((String) map.get("page")) ;		map.put("page", (page - 1) * rows );		map.put("rows", rows);		boolean pageOK = PageUtils.isOK(map);		if(!pageOK)			return ResponseResult.error();		map.put("sort", "addTime");		map.put("order", "asc");				User user = UserUtils.getUer() ;		int systemId = equiptypeService.getUserSystemId(user.getId()) ;		if(systemId != 0){			map.put("systemId", systemId) ;		}		int parentId = equiptypeService.getParentId(map , user) ;		if(parentId != 1){			List<Integer> ids = equiptypeService.getSubTypeIds2(parentId,  ((String)map.get("stationName")).trim()) ;			map.put("ids", ids);		}		List<Map<String, Object>> equips = equipdataService.getHistoryDataEveryday(map) ;		List<EveryDayData> equipList = DataUtils.getDataArray(equips, EveryDayData.class);		long count = equipdataService.getHistoryAccountNoPage(map);				Map<String, Object> responseResult = new HashMap<>();        responseResult.put("equipList",equipList);        responseResult.put("count",count);                return ResponseResult.ok(responseResult);	}		@Description("-查询列表")	@RequestMapping(value="list")	@ResponseBody	public Response list(@RequestParam Map<String, Object> map) throws ControllerException {		boolean pageOK = PageUtils.isOK(map);				if(!pageOK)			return Response.error("分页参数错误");				long total = equipdataService.queryMapListCount(map);				Page page = PageUtils.initPage(map, total);				List<Map<String,Object>> list = equipdataService.queryMapList(map);		return Response.success(list, page);	}		@Description("-根据主键修改")	@RequestMapping(value="update")	public Response update(@RequestParam Map<String, Object> map) throws ControllerException {		if(MapUtils.isEmpty(map, "id"))			return Response.error("id不能为空");		equipdataService.updateOne(map);		return Response.success();	}		@SuppressWarnings({ "unchecked", "rawtypes" })	@RequestMapping(value="export")	public ResponseEntity<byte[]> export(@RequestParam Map map){				String[] header = {"设备名称","泵型","口径","功率","瞬时流量（M3/h）","正累积（M3）","信号质量","通讯状态","更新时间" } ;		SXSSFWorkbook wb = new SXSSFWorkbook();		SXSSFSheet sheet = wb.createSheet("Export_Hospital");		SXSSFRow headerRow = sheet.createRow(0);		SXSSFRow row =  null ;		headerRow = PoiUtil.newHeader(headerRow, header);				int systemId = equiptypeService.getUserSystemId(UserUtils.getUer().getId()) ;		if(systemId != 0){			map.put("systemId", systemId) ;		}		int parentId = equiptypeService.getParentId(map) ;		if(parentId != 1){			List<Integer> ids = equiptypeService.getSubTypeIds2(parentId,  (String)map.get("stationName")) ;			map.put("ids", ids);		}		List<Map<String, Object>> equips = equipdataService.getHistoryNoPage(map) ;		List<CurrentEquipData> equipList = DataUtils.getDataArray(equips, CurrentEquipData.class);				CurrentEquipData equipData = null ;		for (int i = 0; i < equipList.size(); i++) {			row = sheet.createRow(i + 1);			equipData = equipList.get(i);			row.createCell(0).setCellValue(equipData.getName());			row.createCell(1).setCellValue(equipData.getBengxing());			row.createCell(2).setCellValue(equipData.getKoujing() );			row.createCell(3).setCellValue(equipData.getGonglv());			row.createCell(4).setCellValue(equipData.getFlowrate());			row.createCell(5).setCellValue(equipData.getNetcumulative());			row.createCell(6).setCellValue("良好");			row.createCell(7).setCellValue("正常通信");			row.createCell(8).setCellValue(equipData.getAdd_time());		}		return PoiUtil.getPOIEntity(wb, "泵站历史记录") ;	}			@RequestMapping(value="refreshData")	public void refreshData(){		Map<String ,Object> map = new HashMap<>();				List<String> days = DateUtils.getDaysList(DateUtils.addDays(new Date(), -120) , new Date()); 				List<Map<String,Object>> types = equiptypeService.exportTypeList(map) ;				List<Map<String, Object>> equips = equipdataService.getHistoryNoPage(map) ;		for(Map<String, Object> equip : equips){			logger.info(String.valueOf(equip.get("id")) + " , " + String.valueOf(equip.get("netcumulative")) + " , " + String.valueOf(equip.get("areCumulative")));			equipdataService.updateErrorData(equip) ;		}	}		}