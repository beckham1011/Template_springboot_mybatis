package cn.bjjoy.bms.setting.controller;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.context.annotation.Description;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import cn.bjjoy.bms.base.ResponseResult;import cn.bjjoy.bms.exception.ControllerException;import cn.bjjoy.bms.setting.dto.CurrentEquipData;import cn.bjjoy.bms.setting.dto.EquiptypeDto;import cn.bjjoy.bms.setting.dto.OnlineOfflineNums;import cn.bjjoy.bms.setting.entity.User;import cn.bjjoy.bms.setting.persist.model.Equipdata;import cn.bjjoy.bms.util.DataUtils;import cn.bjjoy.bms.util.DateUtils;import cn.bjjoy.bms.util.Response;import cn.bjjoy.bms.util.StringUtils;import cn.bjjoy.bms.util.UserUtils;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;/** * 类描述   :  * 创建人	：system * 创建时间 ：2018-09-13 23:02:18 * @version 1.0 */@Controller@CrossOrigin@SuppressWarnings({ "unchecked", "rawtypes" })@RequestMapping(value="equipdata")public class EquipdataController extends AbstractHosznController {	private static final Logger logger = LogManager.getLogger();		@Description("-添加")	@PostMapping(value="save")	public Response save(Equipdata equipdata) throws ControllerException {		equipdataService.save(equipdata);		return Response.success(equipdata.getId());	}		@Description("-删除")	@DeleteMapping(value="delete")	public Response delete(String id) throws ControllerException {		if(StringUtils.isEmpty(id))			return Response.error("id不能为空");		equipdataService.deleteOne(id);		return Response.success();	}	@Description("-根据主键查询")	@GetMapping(value="one")	public Response one(String id) throws ControllerException {		if(StringUtils.isEmpty(id))			return Response.error("id不能为空");		Equipdata equipdata = equipdataService.queryOne(id);		return Response.success(equipdata);	}		@GetMapping(value = "index" )    public String index( @RequestParam Map paramMap ,ModelMap modelMap) {    	User user = UserUtils.getTokerUser() ;    	Map<String ,Object> map = new HashMap<>();    	map.put("typeLayer", "1") ;    	map.put("parentId", user.getParentId()) ;    	map.put("order", "parentId") ;    	map.put("sort", "asc");		int systemId = equiptypeService.getUserSystemId(user.getId()) ;		if(systemId != 0){			map.put("systemId", String.valueOf(systemId)) ;		}				List<Map<String, Object>> types = equiptypeService.queryDirectSubTypes(map) ;		LinkedList<EquiptypeDto> subTypeList = DataUtils.getDataArray(types, EquiptypeDto.class);		modelMap.addAttribute("subTypeList" + (map.get("typeLayer") == null ? "1" : map.get("typeLayer")),subTypeList) ;		modelMap.addAttribute("parentId", String.valueOf(user.getParentId())) ;        return "/equipdata/index";    }    	@GetMapping(value = "map" )    public String map( ModelMap modelMap) {    	Map map = new HashMap<>();		int parentId = equiptypeService.getParentId(map) ;		if(parentId != 1){			List<Integer> ids = equiptypeService.getSubTypeIds2(parentId,  (String)map.get("stationName")) ;			map.put("ids", ids);		}				List<Map<String, Object>> equips = equipdataService.queryOne(map) ;		List<CurrentEquipData> equipDataList = DataUtils.getDataArray(equips, CurrentEquipData.class);		equipDataList = equipdataService.setWifi(equipDataList , null);		String stringListJson = JSON.toJSONString(equipDataList);		modelMap.addAttribute("equipDataList", stringListJson);        return "/equipdata/map";    }    	@GetMapping(value = "updateEverydayData" )	public void updateEverydayData(){		Map map = new HashMap();		equipdataService.insertDataHistory(map);	}			@GetMapping(value = "getCurrentDate" )    @ResponseBody    public ResponseResult getCurrentDate(){		 List dateList = new ArrayList();		 dateList.add(DateUtils.getCurrentYear() + "/" + (DateUtils.getCurrentMonth() - 1) + "/" + DateUtils.getCurrentDay());		 dateList.add(DateUtils.getCurrentYear() + "/" + (DateUtils.getCurrentMonth()) + "/" + DateUtils.getCurrentDay());		 return ResponseResult.ok(dateList);	}		@GetMapping(value = "countMsg" )    @ResponseBody    public ResponseResult getCoungMsg(){    	Map<String,Object> map = new HashMap<>();		try {	    	map.put("typeLayer", "1") ;	    	map.put("parentId", "1") ;	    	map.put("order", "parentId") ;	    	map.put("sort", "asc");	    				map.put("systemId", String.valueOf(1)) ;						List<OnlineOfflineNums> onlineOfflineNumsList = equipdataService.queryOnlineAndOffLineNums(map) ;			map.put("allNums" , onlineOfflineNumsList.get(0).getNum() + onlineOfflineNumsList.get(1).getNum()) ;			map.put("onLineNums" , onlineOfflineNumsList.get(0).getNum()) ;			map.put("offLineNums" , onlineOfflineNumsList.get(1).getNum()) ;			map.put("onLineNumsRate" ,DataUtils.formattedDecimalToPercentage(onlineOfflineNumsList.get(0).getNum() , onlineOfflineNumsList.get(1).getNum())) ;						map.put("currentDay" , DateUtils.getCurrentDateZZ() + " " + DateUtils.getCurrentDayOfWeekZZ()) ;			map.put("username" , UserUtils.getUername()) ;			map.put("userId" , UserUtils.getUserId()) ;			map.put("systemInfo" , systemService.getSystem(1)) ;		} catch (Exception e) {			e.printStackTrace();			return ResponseResult.error();		}		return ResponseResult.ok(map);    }    	@Description("-查找最新数据")	@GetMapping(value="newest")	@ResponseBody	public ResponseResult getNewestData(@RequestParam Map map ,  ModelMap modelMap) throws ControllerException {		Map<String, Object> responseResult = new HashMap<>();		List<CurrentEquipData> equipList = null ;				try {			equipList = getEquipList(map) ;			long count = equipdataService.getCurrentAccount(map);			responseResult.put("equipList",equipList);			responseResult.put("count",count);						modelMap.addAttribute("subTypeList2", equiptypeService.getSubType(map)) ;		} catch (NumberFormatException e) {			logger.error(e.getMessage(), e);		}                return ResponseResult.ok(responseResult);	}			@Description("-查找最新数据")	@GetMapping(value="newestPhone")	@ResponseBody	public ResponseResult getNewestDataPhone(@RequestParam Map map ,  ModelMap modelMap) throws ControllerException {		Map<String, Object> responseResult = new HashMap<>();		List<CurrentEquipData> equipList = null ;		try {			equipList = getEquipList2(map) ;			long count = equipdataService.getCurrentAccount(map);			responseResult.put("equipList",equipList);			responseResult.put("count",count);						modelMap.addAttribute("subTypeList2", equiptypeService.getSubType(map)) ;		} catch (NumberFormatException e) {			logger.error("查找最新数据: " , e);		}        return ResponseResult.ok(responseResult);	}	public List<CurrentEquipData> getEquipList(Map map){		List<CurrentEquipData> equipList = null ;		try{			Integer rows = Integer.valueOf((String) map.get("rows")) ;			Integer page = Integer.valueOf((String) map.get("page")) ;			map.put("page", (page - 1) * rows );			map.put("rows",rows);						User user = UserUtils.getUer() ;			int systemId = equiptypeService.getUserSystemId(user.getId()) ;			if(systemId != 0){				map.put("systemId", systemId) ;			}			int parentId = equiptypeService.getParentId(map, UserUtils.getUer()) ;						List<Integer> ids = equiptypeService.getSubTypeIds2(parentId,  (String)map.get("stationName")) ;			map.put("ids", ids);						List<Map<String, Object>> equips = equipdataService.queryOne(map) ;			equipList = DataUtils.getDataArray(equips, CurrentEquipData.class);						equipList = equipdataService.setWifi(equipList , map);		}catch(Exception e){			logger.debug("获取列表，getEquipList：", e);			e.printStackTrace();		}		return equipList;	}	public List<CurrentEquipData> getEquipList2(Map map){		List<CurrentEquipData> equipList = null ;		try{			Integer rows = Integer.valueOf((String) map.get("rows")) ;			Integer page = Integer.valueOf((String) map.get("page")) ;			map.put("page", (page - 1) * rows );			map.put("rows",rows);						map.put("systemId", 1) ;			int parentId = 0;			if(parentId != 1){				List<Integer> ids = equiptypeService.getSubTypeIds2(parentId,  (String)map.get("stationName")) ;				map.put("ids", ids);			}			List<Map<String, Object>> equips = equipdataService.queryOne(map) ;			equipList = DataUtils.getDataArray(equips, CurrentEquipData.class);						equipList = equipdataService.setWifi(equipList , map);		}catch(Exception e){			logger.debug("", e);		}		return equipList;	}		@Description("-查询列表")	@GetMapping(value="list")	@ResponseBody	public JSONObject list(@RequestParam Map<String, Object> map) throws ControllerException {		Integer rows = Integer.valueOf((String) map.get("rows")) ;		Integer page = Integer.valueOf((String) map.get("page")) ;		map.put("page", (page - 1) * rows );		map.put("rows", rows);				List<Map<String, Object>> equips = equipdataService.getHistoryNoPage(map);		List<CurrentEquipData> equipList = DataUtils.getDataArray(equips, CurrentEquipData.class);		long count = equipdataService.getHistoryAccountNoPage(map);        Map<String, Object> responseResult = new HashMap<>();        responseResult.put("equipList",equipList);        responseResult.put("count",count);		return (JSONObject)JSON.toJSON(ResponseResult.ok(responseResult));	}		@Description("-根据主键修改")	@GetMapping(value="edit/{addressCode}/{dataId}")	public String edit(@PathVariable String addressCode,@PathVariable Integer dataId ,  ModelMap modelMap) throws ControllerException {		Map<String ,Object> data = equipdataService.queryStationCurrentData(String.valueOf(dataId)) ;		if(data == null){			data = new HashMap<>();			data.put("dataId", 0);			data.put("addresscode", addressCode) ;			data.put("flowrate", 0);			data.put("netcumulative", 0);		}		modelMap.put("data", data) ;		return "/equipdata/edit";	}			@Description("-根据主键修改")	@PutMapping(value="update")	@ResponseBody	public Response update(@RequestParam Map<String, Object> map) throws ControllerException {		try {			Map<String ,Object> data = equipdataService.getNewestDataByAddress((String)map.get("addressCode")) ;			if(data == null){				Equipdata equipdata = new Equipdata();				equipdata.setAddressCode((String)map.get("addressCode"));				equipdata.setNetCumulative(new BigDecimal(0));				equipdata.setFlowRate(new BigDecimal(0));				equipdataService.save(equipdata);			}else{				equipdataService.updateRealData(map);			}		} catch (Exception e) {			e.printStackTrace();			return Response.error("更新失败") ;		}		return Response.success();	}			@Description("-查询列表")	@GetMapping(value="analysis")	@ResponseBody	public ResponseResult analysis(@RequestParam Map<String, Object> map) throws ControllerException {		Integer rows = Integer.valueOf((String) map.get("rows")) ;		Integer page = Integer.valueOf((String) map.get("page")) ;		map.put("page", (page - 1) * rows );		map.put("rows",rows);		List<Map<String, Object>> equips = equipdataService.getHistoryNoPage(map);		List<CurrentEquipData> equipList = DataUtils.getDataArray(equips, CurrentEquipData.class);		long count = equipdataService.getHistoryAccountNoPage(map);        Map<String, Object> responseResult = new HashMap<>();        responseResult.put("equipList",equipList);        responseResult.put("count",count);		return ResponseResult.ok(responseResult);	}		}