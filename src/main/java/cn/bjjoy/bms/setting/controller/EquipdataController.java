package cn.bjjoy.bms.setting.controller;import cn.bjjoy.bms.setting.persist.model.Equiptype;import com.google.common.collect.Maps;import java.math.BigDecimal;import java.time.LocalDate;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.concurrent.ThreadLocalRandom;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.context.annotation.Description;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import cn.bjjoy.bms.base.ResponseResult;import cn.bjjoy.bms.exception.ControllerException;import cn.bjjoy.bms.setting.dto.CurrentEquipData;import cn.bjjoy.bms.setting.dto.EquiptypeDto;import cn.bjjoy.bms.setting.entity.User;import cn.bjjoy.bms.setting.persist.model.Equipdata;import cn.bjjoy.bms.setting.poi.ExportEquipData;import cn.bjjoy.bms.util.DataUtils;import cn.bjjoy.bms.util.DateUtils;import cn.bjjoy.bms.util.POIEasyExport;import cn.bjjoy.bms.util.Response;import cn.bjjoy.bms.util.StringUtils;import cn.bjjoy.bms.util.UserUtils;/** * 类描述   : * 创建人	：system * 创建时间 ：2018-09-13 23:02:18 * * @version 1.0 */@Controller@CrossOrigin@SuppressWarnings({"unchecked", "rawtypes"})@RequestMapping(value = "equipdata")public class EquipdataController extends AbstractHosznController {    private static final Logger logger = LogManager.getLogger();    private static final Integer ADD_DEVICE_NUM = 200;    @Description("-添加")    @PostMapping(value = "save")    public Response save(Equipdata equipdata) throws ControllerException {        equipdataService.save(equipdata);        return Response.success(equipdata.getId());    }    @Description("-删除")    @DeleteMapping(value = "delete")    public Response delete(String id) throws ControllerException {        if (StringUtils.isEmpty(id))            return Response.error("id不能为空");        equipdataService.deleteOne(id);        return Response.success();    }    @Description("-根据主键查询")    @GetMapping(value = "one")    public Response one(String id) throws ControllerException {        if (StringUtils.isEmpty(id))            return Response.error("id不能为空");        Equipdata equipdata = equipdataService.queryOne(id);        return Response.success(equipdata);    }    @GetMapping(value = "index")    public String index(@RequestParam Map paramMap, ModelMap modelMap) {        User user = UserUtils.getTokerUser();        Map<String, Object> map = new HashMap<>();        map.put("typeLayer", "1");        map.put("parentId", user.getParentId());        map.put("order", "parentId");        map.put("sort", "asc");        int systemId = equiptypeService.getUserSystemId(user.getId());        if (systemId != 0) {            map.put("systemId", String.valueOf(systemId));        }        List<Map<String, Object>> types = equiptypeService.queryDirectSubTypes(map);        LinkedList<EquiptypeDto> subTypeList = DataUtils.getDataArray(types, EquiptypeDto.class);        modelMap.addAttribute("subTypeList" + (map.get("typeLayer") == null ? "1" : map.get("typeLayer")), subTypeList);        modelMap.addAttribute("parentId", String.valueOf(user.getParentId()));        return "/equipdata/index";    }    @GetMapping(value = "map")    public String map(ModelMap modelMap) {        Map map = new HashMap<>();        int parentId = equiptypeService.getParentId(map);        if (parentId != 1) {            List<Integer> ids = equiptypeService.getSubTypeIds2(parentId, (String) map.get("stationName"));            map.put("ids", ids);        }        List<Map<String, Object>> equips = equipdataService.queryOne(map);        List<CurrentEquipData> equipDataList = DataUtils.getDataArray(equips, CurrentEquipData.class);        equipDataList = equipdataService.setWifi(equipDataList, null);        String stringListJson = JSON.toJSONString(equipDataList);        modelMap.addAttribute("equipDataList", stringListJson);        return "/equipdata/map";    }    @GetMapping(value = "updateEverydayData")    public void updateEverydayData() {        Map map = new HashMap();        equipdataService.insertDataHistory(map);    }    @GetMapping(value = "getCurrentDate")    @ResponseBody    public ResponseResult getCurrentDate() {        List dateList = new ArrayList();        dateList.add(DateUtils.getCurrentYear() + "/" + (DateUtils.getCurrentMonth() - 1) + "/" + DateUtils.getCurrentDay());        dateList.add(DateUtils.getCurrentYear() + "/" + (DateUtils.getCurrentMonth()) + "/" + DateUtils.getCurrentDay());        return ResponseResult.ok(dateList);    }    @GetMapping(value = "countMsg")    @ResponseBody    public ResponseResult getCountMsg() {        Map<String, Object> map = new HashMap<>();        try {            User currentUser = UserUtils.getUer();            map.put("parentId", currentUser.getParentId());            List<Integer> ids = equiptypeService.getEquipsIdsByParentId(equiptypeService.getParentId(map, currentUser));            map.put("ids", ids);            int systemId = equiptypeService.getUserSystemId(currentUser.getId());            map.put("systemId", systemId);            Long allNums = (long) ids.size();            Long onlineNum = equipdataService.queryOnlineNum(map);            map.put("allNums", allNums);            map.put("onLineNums", onlineNum);            map.put("offLineNums", allNums - onlineNum);            map.put("onLineNumsRate", DataUtils.formattedDecimalToPercentage(onlineNum, allNums));            map.put("currentDay", DateUtils.getCurrentDateZZ() + " " + DateUtils.getCurrentDayOfWeekZZ());            map.put("username", UserUtils.getUername());            map.put("userId", UserUtils.getUserId());            map.put("systemInfo", systemService.getSystem(systemId));        } catch (Exception e) {            e.printStackTrace();            return ResponseResult.error();        }        return ResponseResult.ok(map);    }    @Description("-查找最新数据")    @GetMapping(value = "newest")    @ResponseBody    public ResponseResult getNewestData(@RequestParam Map map, ModelMap modelMap) throws ControllerException {        Map<String, Object> responseResult = new HashMap<>();        List<CurrentEquipData> equipList = null;        try {            equipList = getEquipList(map);            long count = equipdataService.getCurrentAccount(map);            responseResult.put("equipList", equipList);            responseResult.put("count", count);            modelMap.addAttribute("subTypeList2", equiptypeService.getSubType(map));        } catch (NumberFormatException e) {            logger.error(e.getMessage(), e);        }        return ResponseResult.ok(responseResult);    }    @Description("-查找最新数据")    @GetMapping(value = "newestPhone")    @ResponseBody    public ResponseResult getNewestDataPhone(@RequestParam Map map, ModelMap modelMap) throws ControllerException {        Map<String, Object> responseResult = new HashMap<>();        List<CurrentEquipData> equipList = null;        try {            equipList = getEquipList2(map);            long count = equipdataService.getCurrentAccount(map);            responseResult.put("equipList", equipList);            responseResult.put("count", count);            modelMap.addAttribute("subTypeList2", equiptypeService.getSubType(map));        } catch (NumberFormatException e) {            logger.error("查找最新数据: ", e);        }        return ResponseResult.ok(responseResult);    }    public List<CurrentEquipData> getEquipList(Map map) {        List<CurrentEquipData> equipList = null;        try {            if (map.containsKey("rows") && map.containsKey("page")) {                Integer rows = Integer.valueOf((String) map.get("rows"));                Integer page = Integer.valueOf((String) map.get("page"));                map.put("page", (page - 1) * rows);                map.put("rows", rows);            }            User user = UserUtils.getUer();            int systemId = equiptypeService.getUserSystemId(user.getId());            if (systemId != 0) {                map.put("systemId", systemId);            }            int parentId = equiptypeService.getParentId(map, UserUtils.getUer());            List<Integer> ids = equiptypeService.getSubTypeIds2(parentId, (String) map.get("stationName"));            map.put("ids", ids);            List<Map<String, Object>> equips = equipdataService.queryOne(map);            equipList = DataUtils.getDataArray(equips, CurrentEquipData.class);            equipList = equipdataService.setWifi(equipList, map);        } catch (Exception e) {            logger.debug("获取列表，getEquipList：", e);            e.printStackTrace();        }        return equipList;    }    @Description("-导出当前累计数据")    @GetMapping(value = "export")    @ResponseBody    public void exportData(@RequestParam Map map) {        List<CurrentEquipData> equipList = null;        User user = UserUtils.getUer();        int systemId = equiptypeService.getUserSystemId(user.getId());        if (systemId != 0) {            map.put("systemId", systemId);        }        map.put("parentId", user.getParentId());        equipList = getEquipList(map);        List<ExportEquipData> exportDatas = equipdataService.formatExportData(equipList);        POIEasyExport.exportExcel(exportDatas, "累计数据", "累计数据", ExportEquipData.class, "厚水智能-累计数据.xls", response);    }    public List<CurrentEquipData> getEquipList2(Map map) {        List<CurrentEquipData> equipList = null;        try {            Integer rows = Integer.valueOf((String) map.get("rows"));            Integer page = Integer.valueOf((String) map.get("page"));            map.put("page", (page - 1) * rows);            map.put("rows", rows);            map.put("systemId", 1);            int parentId = 0;            if (parentId != 1) {                List<Integer> ids = equiptypeService.getSubTypeIds2(parentId, (String) map.get("stationName"));                map.put("ids", ids);            }            List<Map<String, Object>> equips = equipdataService.queryOne(map);            equipList = DataUtils.getDataArray(equips, CurrentEquipData.class);            equipList = equipdataService.setWifi(equipList, map);        } catch (Exception e) {            logger.debug("", e);        }        return equipList;    }    @Description("-查询列表")    @GetMapping(value = "list")    @ResponseBody    public JSONObject list(@RequestParam Map<String, Object> map) throws ControllerException {        Integer rows = Integer.valueOf((String) map.get("rows"));        Integer page = Integer.valueOf((String) map.get("page"));        map.put("page", (page - 1) * rows);        map.put("rows", rows);        List<Map<String, Object>> equips = equipdataService.getHistoryNoPage(map);        List<CurrentEquipData> equipList = DataUtils.getDataArray(equips, CurrentEquipData.class);        long count = equipdataService.getHistoryAccountNoPage(map);        Map<String, Object> responseResult = new HashMap<>();        responseResult.put("equipList", equipList);        responseResult.put("count", count);        return (JSONObject) JSON.toJSON(ResponseResult.ok(responseResult));    }    @Description("-根据主键修改")    @GetMapping(value = "edit/{addressCode}/{dataId}")    public String edit(@PathVariable String addressCode, @PathVariable Integer dataId, ModelMap modelMap) throws ControllerException {        Map<String, Object> data = equipdataService.queryStationCurrentData(String.valueOf(dataId));        if (data == null) {            data = new HashMap<>();            data.put("dataId", 0);            data.put("addresscode", addressCode);            data.put("flowrate", 0);            data.put("netcumulative", 0);            data.put("online", 0);            data.put("addTime", DateUtils.getCurrentDate());        }        modelMap.put("data", data);        return "/equipdata/edit";    }    @Description("-根据主键修改")    @PutMapping(value = "update")    @ResponseBody    public Response update(@RequestParam Map<String, Object> map) throws ControllerException {        try {            String addressCode = (String) map.get("addressCode");            Map<String, Object> data = equipdataService.getNewestDataByAddress(addressCode);            if (data == null) {                Equipdata equipdata = new Equipdata();                equipdata.setAddressCode(addressCode);                equipdata.setNetCumulative(new BigDecimal(0));                equipdata.setFlowRate(new BigDecimal(0));                equipdata.setAddTime((String) map.get("addTime"));                equipdataService.save(equipdata);            } else {                if ("on".equals((String) map.get("online"))) {                    equiptypeService.updateOnline(addressCode, true);                } else {                    equiptypeService.updateOnline(addressCode, false);                }                equipdataService.updateRealData(map);            }        } catch (Exception e) {            e.printStackTrace();            return Response.error("更新失败");        }        return Response.success();    }    /**     * @param map     * @return     * @throws ControllerException     */    @Description("-查询列表")    @GetMapping(value = "analysis")    @ResponseBody    public ResponseResult analysis(@RequestParam Map<String, Object> map) throws ControllerException {        Integer rows = Integer.valueOf((String) map.get("rows"));        Integer page = Integer.valueOf((String) map.get("page"));        map.put("page", (page - 1) * rows);        map.put("rows", rows);        List<Map<String, Object>> equips = equipdataService.getHistoryNoPage(map);        List<CurrentEquipData> equipList = DataUtils.getDataArray(equips, CurrentEquipData.class);        long count = equipdataService.getHistoryAccountNoPage(map);        Map<String, Object> responseResult = new HashMap<>();        responseResult.put("equipList", equipList);        responseResult.put("count", count);        return ResponseResult.ok(responseResult);    }    /**     * Add some device online     */    @Description("-增加100个在线设备")    @GetMapping("update200DeviceOnline")    public void add100DeviceOnline() {        List<Equiptype> deviceList = equiptypeService.queryList(Maps.newHashMap());        final String currentDate = LocalDate.now().toString();        int updateStart = 1;        while (updateStart < ADD_DEVICE_NUM) {            int random = ThreadLocalRandom.current().nextInt(deviceList.size());            Equiptype device = deviceList.get(random);            String addressCode = device.getAddressCode();            if (isAddressCodeValid(addressCode)) {                logger.info("AddressCode: " + addressCode + ", update num: " + updateStart);                Map<String, Object> dataMap = equipdataService.getNewestDataByAddress(addressCode);                if (dataMap != null) {                    updateStart++;                    dataMap.put("addTime", currentDate);                    dataMap.put("online", "on");                    dataMap.put("id", dataMap.get("dataId"));                    equipdataService.updateRealData(dataMap);                    equiptypeService.updateOnline(addressCode, true);                }            }        }    }    @GetMapping("offlineAllDevice")    public void offlineAllDevice() {        List<Equiptype> deviceList = equiptypeService.queryList(Maps.newHashMap());        deviceList.stream()                .filter(device -> isAddressCodeValid(device.getAddressCode()))                .forEach(device -> equiptypeService.updateOnline(device.getAddressCode(), false));    }    /**     * Check if address code is valid.     *     * @param addressCode The valid address code.     * @return Boolean.     */    protected boolean isAddressCodeValid(String addressCode) {        return addressCode != null && addressCode.startsWith("hsg") && addressCode.length() == 6;    }}