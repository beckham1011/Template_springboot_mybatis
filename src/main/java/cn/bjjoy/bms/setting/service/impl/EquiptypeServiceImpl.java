package cn.bjjoy.bms.setting.service.impl;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import cn.afterturn.easypoi.excel.ExcelImportUtil;import cn.afterturn.easypoi.excel.entity.ImportParams;import cn.afterturn.easypoi.excel.entity.result.ExcelImportResult;import cn.bjjoy.bms.setting.dao.BaseDao;import cn.bjjoy.bms.setting.dto.EquiptypeDto;import cn.bjjoy.bms.setting.dto.UserDto;import cn.bjjoy.bms.setting.entity.User;import cn.bjjoy.bms.setting.persist.mapper.EquiptypeDao;import cn.bjjoy.bms.setting.persist.model.Equiptype;import cn.bjjoy.bms.setting.persist.model.System;import cn.bjjoy.bms.setting.service.EquiptypeService;import cn.bjjoy.bms.util.ConvertUtil;import cn.bjjoy.bms.util.UserChangeVo;import cn.bjjoy.bms.util.UserUtils;/** * 类描述   :  * 创建人	：system * 创建时间 ：2018-09-13 23:02:18 * @version 1.0 */@Service@Transactional@SuppressWarnings({ "rawtypes", "unchecked" })public class EquiptypeServiceImpl extends BaseServiceImpl<Equiptype> implements EquiptypeService {		Logger logger = LoggerFactory.getLogger(EquiptypeServiceImpl.class) ;		private static Map<Integer, String> systemMap = new HashMap<>();	static{		systemMap.put(0, "南京厚水智能监控系统") ;		systemMap.put(1, "高港区农业综合水价改革远程监测系统") ;		systemMap.put(2, "南京测试") ;		systemMap.put(3, "远程监测系统") ;		systemMap.put(4, "大丰区农业水价综合改革监测系统") ;	}		@Autowired	private EquiptypeDao equiptypeDao;	@Override	public BaseDao<Equiptype> getBaseDao() {		return equiptypeDao;	}		public List<Map<String,Object>> getListNoPage(Map map ){		return equiptypeDao.queryMapListNoPage(map) ;	}	@Override	public List<Map<String, Object>> getSubType(Map map) {		return equiptypeDao.querySubTypes(map) ;	}		@Override	public List<Map<String, Object>> queryDirectSubTypes(Map map) {		return equiptypeDao.queryDirectSubTypes(map) ;	}		@Override	public int getSubTypeCount(Map map) {		return equiptypeDao.getSubTypeCount(map) ;	}		public List<Integer> getSubTypeIds(int parentId, String stationName){		Map map = new HashMap<String,Object>();		map.put("parentId", parentId) ;		logger.info("parentId" + parentId) ;				if(stationName != null && !"".equalsIgnoreCase(stationName))			map.put("stationName", stationName) ;				List<Integer> equipTypes = equiptypeDao.getSubTypeIds(map);		return equipTypes;	}			public List<Equiptype> getTypesByIds(Map map) {		List<Equiptype> types = new ArrayList<>() ;		int systemId = getUserSystemId(UserUtils.getUer().getId()) ;		if(systemId != 0){			map.put("systemId", systemId) ;		}		List<Map<String, Object>> equipTypes = equiptypeDao.getTypesByIds(map);		for(Map<String, Object> type : equipTypes){			types.add((Equiptype) ConvertUtil.map2Obj(type, Equiptype.class)) ;		}		return types ;	}		public List<Equiptype> getSubTypes(Map map){		List<Equiptype> types = new ArrayList<>() ;		List<Map<String, Object>> equipTypes = equiptypeDao.querySubTypes(map);		for(Map<String, Object> type : equipTypes){			types.add((Equiptype) ConvertUtil.map2Obj(type, Equiptype.class)) ;		}		return types;	}		/** 使用非递归方法查询子目录的泵站id集合 */	public List<Integer> getSubTypeIds2(int parentId, String stationName){		Map map = new HashMap<String,Object>();		map.put("parentId", parentId) ;				if(stationName != null && !"".equalsIgnoreCase(stationName))			map.put("stationName", stationName) ;		List<Integer> equipTypeIds = equiptypeDao.getSubTypeIds(map) ;		return equipTypeIds ;	}		public List<Integer> getSubTypeIds(LinkedList<EquiptypeDto> subTypeList){		List<Integer> ids = new ArrayList<>();		for(EquiptypeDto type : subTypeList){			ids.add(type.getId());		}		return ids ;	}		public int getParentId(Map map){		int parentId3 = Integer.valueOf(map.containsKey("parentId3") ? (String)map.get("parentId3") : "-3");		int parentId2 = Integer.valueOf(map.containsKey("parentId2") ? (String)map.get("parentId2") : "-2");		int parentId1 = Integer.valueOf(map.containsKey("parentId1") ? (String)map.get("parentId1") : "-1");		//初始情况都未选择，从第一父节点选值		if(map.containsKey("parentId")){			return Integer.valueOf((String) map.get("parentId")).intValue() ;		}		if( parentId3 == -3 && parentId2 == -2 && parentId1 == -1 ){			return 1;		}else if( parentId3 == -3 && parentId2 == -2 && parentId1 > 0 ){			return parentId1;		}else if( parentId3 == -3 && parentId2 > 0 ){			return parentId2;		}else if( parentId3 > 0 ){			return parentId3;		}		return 1 ;	}		@Override	public void updateByAddressCode(Map map) {		equiptypeDao.updateByAddressCode(map);	}		@Override	public void updateInfoByAddressCode(Map map) {		equiptypeDao.updateInfoByAddressCode(map);	}			public String getAddressCodeByIP(String ip){		return equiptypeDao.getAddressCodeByIp(ip) ;	}		public String getIPByAddressCode(String addressCode){		return equiptypeDao.getIPByAddressCode(addressCode) ;	}	@Override	public Integer getTypeAndLayer(UserDto userDto) {		String parentId = (userDto.getTypeSelect2() == null || Integer.valueOf((String)userDto.getTypeSelect2().replace(",", "")) < 0) ? 				(userDto.getTypeSelect1() == null || Integer.valueOf((String)userDto.getTypeSelect1().replace(",", "")) < 0) ? 				userDto.getTypeSelect0() 				: userDto.getTypeSelect1() 				: userDto.getTypeSelect2() ;		return Integer.parseInt(parentId.replace(",", ""));	}		@Override	public Integer[] getTypeAndLayer(Map<String, Object> map) {		int parentId3 = Integer.valueOf(map.containsKey("parentId3") ? (String)map.get("parentId3") : "-3");		int parentId2 = Integer.valueOf(map.containsKey("parentId2") ? (String)map.get("parentId2") : "-2");		int parentId1 = Integer.valueOf(map.containsKey("parentId1") ? (String)map.get("parentId1") : "-1");		Integer[] values = new Integer[2] ;		if(parentId1 < 0){			values[0] = 1 ;			values[1] = 2 ;		}else if(parentId2 < 0){			values[0] = parentId1 ;			values[1] = 3 ;		}else if(parentId3 < 0){			values[0] = parentId2 ;			values[1] = 4 ;		}		return values;	}		public Integer[] getTypeAndLayer(int type1, int type2 ,int type3){		Integer[] values = new Integer[2] ;		if(type1 < 0){			values[0] = 1 ;			values[1] = 2 ;		}else if(type2 < 0){			values[0] = type1 ;			values[1] = 3 ;		}else if(type3 < 0){			values[0] = type2 ;			values[1] = 4 ;		}		return values ;	}	//判断当前属于哪层的数据	public Integer[] getTypeAndLayer(Equiptype type){		Integer[] types = new Integer[2];		if("2".equals(type.getTypeLayer())){					}else if("3".equals(type.getTypeLayer())){			types[0] = type.getParentId() ;		}else if("4".equals(type.getTypeLayer())){			types[0] = equiptypeDao.queryOne(String.valueOf( type.getParentId())).getParentId() ;			types[1] = type.getParentId() ;		}		return types ;	}			public List<Map<String,Object>> exportTypeList(Map map){		return equiptypeDao.exportTypeList(map);	}		public List<System> getSystems(){				List<System> systems = new ArrayList<>();		int systemId = getUserSystemId(UserUtils.getUer().getId()) ;		if(systemId == 0){			for(Integer key : systemMap.keySet()){				System s = new System();				s.setId(key);				s.setSystem(systemMap.get(key));				systems.add(s) ;			}		}else{			System s = new System();			s.setId(systemId);			s.setSystem(systemMap.get(systemId));			systems.add(s) ;		}        return systems ;	}		public List<String> getAddressCodeNull() {		return equiptypeDao.getAddressCodeNull() ;	}	@Override	@Async	public void importFile(MultipartFile file) {		try {			ImportParams importParams = new ImportParams();			// 数据处理			importParams.setHeadRows(1);			importParams.setTitleRows(1); 			// 需要验证			importParams.setNeedVerfiy(true);						ExcelImportResult<cn.bjjoy.bms.setting.poi.Equiptype> result = ExcelImportUtil.importExcelMore(file.getInputStream(), cn.bjjoy.bms.setting.poi.Equiptype.class, importParams);						logger.info("TypesSize:", result.getList().size());		} catch (Exception e) {			e.printStackTrace();		}        	}	public Map getParamMap(Map map){		Integer rows = Integer.valueOf((String) map.get("rows")) ;		Integer page = Integer.valueOf((String) map.get("page")) ;		map.put("page", (page - 1) * rows );		map.put("rows",rows);		int systemId = getUserSystemId(UserUtils.getUer().getId()) ;		if(systemId != 0){			map.put("systemId", systemId) ;		}		int parentId = this.getParentId(map) ;		List<Integer> ids = this.getSubTypeIds2(parentId,  ((String)map.get("stationName")).trim()) ;		map.put("ids", ids);		return map ;	}		public List<UserChangeVo> getUsers(){		List<UserChangeVo> lis = new ArrayList<UserChangeVo>();		UserChangeVo vo = null ;		for (int i = 0; i < 6; i++) {			vo = new UserChangeVo() ;			vo.setAddSum(String.valueOf(i + 1));			vo.setBtSum(String.valueOf(i + 2));			vo.setUserSum(String.valueOf(i + 3));			vo.setXhSum(String.valueOf(i + 4));			vo.setZcSum(String.valueOf(i + 5));			lis.add(vo) ;		}		return  lis;	}	@Override	public int getUserSystemId(Integer id) {		Map map = new HashMap();		map.put("id", id) ;		int systemId = equiptypeDao.getUserSystemIdByUserId(map) ;		return systemId ;	}	/** 防止泵站的parentId小于用户所属的组织机构的parentId	 *  所以在点击选择决策树查询过程中，不能用 决策树的parentId 和 用户的parentId直接大小比较，	 *  通过的parentId所对应的组织机构层级 和 选择的决策树的层级进行比较	 */	@Override	public int getParentId(Map map, User user) {				int parentId = Integer.valueOf((String)map.get("parentId"));		int userParentId = user.getParentId();				if(parentId == userParentId)			return parentId;				int parentLayer = 0 ;		int userLayer = 0 ;		map.put("ids", Collections.singletonList(user.getParentId())) ;				Map<Integer, String> parentType = equiptypeDao.getTypeById((String)map.get("parentId"));		String parentEquiptypeLayer = (String) parentType.get("typeLayer") ;				if(StringUtils.isNoneEmpty(parentEquiptypeLayer))			parentLayer = Integer.valueOf(parentEquiptypeLayer) ;				Map<Integer, String> originalType = equiptypeDao.getTypeById(String.valueOf(user.getParentId())) ;		String userEquiptype = (String) originalType.get("typeLayer") ;		if(StringUtils.isNoneEmpty(userEquiptype))			userLayer = Integer.valueOf(userEquiptype) ;				return parentLayer >= userLayer ? parentId : userParentId;	}		public List<String> allEquipAddressCodeList(Map map){		return this.equiptypeDao.allEquipAddressCodeList(map);	}	}