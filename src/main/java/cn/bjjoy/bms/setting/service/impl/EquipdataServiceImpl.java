package cn.bjjoy.bms.setting.service.impl;import java.util.ArrayList;import java.util.List;import java.util.Map;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import cn.bjjoy.bms.setting.dao.BaseDao;import cn.bjjoy.bms.setting.dto.AnalysisDto;import cn.bjjoy.bms.setting.dto.CurrentEquipData;import cn.bjjoy.bms.setting.dto.OnlineOfflineNums;import cn.bjjoy.bms.setting.persist.mapper.EquipdataDao;import cn.bjjoy.bms.setting.persist.model.Equipdata;import cn.bjjoy.bms.setting.service.EquipdataService;import cn.bjjoy.bms.util.DataUtils;import cn.bjjoy.bms.util.DateUtils;/** * 类描述   :  * 创建人	：system * 创建时间 ：2018-09-13 23:02:18 * @version 1.0 */@Service@Transactionalpublic class EquipdataServiceImpl extends BaseServiceImpl<Equipdata> implements EquipdataService {		Logger logger = LoggerFactory.getLogger(EquipdataServiceImpl.class) ;		@Autowired	private EquipdataDao equipdataDao;	@Override	public BaseDao<Equipdata> getBaseDao() {		return equipdataDao;	}	public long getCurrentAccount(Map map){		return equipdataDao.getNewestDataCount(map) ;	}		@Override	public List<Map<String, Object>> queryOne(Map map) {		return equipdataDao.getNewestData(map);	}		@Override	public long getHistoryAccountNoPage(){		return equipdataDao.getDataNoPageCount() ;	}		@Override	public List<Map<String, Object>> getHistoryNoPage(Map map) {		return equipdataDao.getDataNoPage(map);	}			public List<AnalysisDto> analysisesDto(Map map){		List<Map<String, Object>> mapAnalysis = equipdataDao.commonAnalysis(map);		return DataUtils.getDataArray(mapAnalysis, AnalysisDto.class);	}	@Override	public List<CurrentEquipData> setWifi(List<CurrentEquipData> equipList) {		List<CurrentEquipData> result = new ArrayList<CurrentEquipData>();		for(CurrentEquipData eqData : equipList){						String waterStatusFlag = "" ;			if(eqData.getAdd_time() == null){				waterStatusFlag = "0" ;			}else{				waterStatusFlag = DateUtils.getDiffHour(eqData.getAdd_time())< 24L ? "1" : "0" ;			}			eqData.setWaterstatus(waterStatusFlag);						Long diffHour = (System.currentTimeMillis() - (eqData.getUpdate_time() == null ? 0L : Long.valueOf(eqData.getUpdate_time()))) / (1000 * 3600) ;			String flag = "" ;			if(diffHour < 8L){				flag = "4" ;			}else if(diffHour < 12L){				flag = "3" ;			}else if(diffHour < 24L){					flag = "2" ;			}else{				flag = "1" ;			}			eqData.setCommunicationStatus(flag);			logger.info("waterstatus:" + eqData.getWaterstatus() + ", updateTime:" + eqData.getUpdate_time() + " , diffHour:" + diffHour + " , CommunicationStatus : " + eqData.getCommunicationStatus());			result.add(eqData);		}		return result;	}	@Override	public List<OnlineOfflineNums> queryOnlineAndOffLineNums(Map map) {		List<OnlineOfflineNums> onlineOfflineNums = new ArrayList<>();		List<Map<String, Object>> onlineAndOfflineList = equipdataDao.queryOnlineAndOffLineNums(map);		Long onlineNum = 0L ;		Long offlineNum = 0L ;		for(Map<String, Object> onlineAndOfflineMap : onlineAndOfflineList){			if(onlineAndOfflineMap.containsKey("diffhour")){				Long keyDiffHour =  (Long)onlineAndOfflineMap.get("diffhour")  ;				if(keyDiffHour < 24L){					onlineNum += (Long)onlineAndOfflineMap.get("nums");				}else{					offlineNum += (Long)onlineAndOfflineMap.get("nums");				}			}else{				//add_time为空时，diffhour不包含在map里				offlineNum += (Long)onlineAndOfflineMap.get("nums");			}	    }		OnlineOfflineNums onNums = new OnlineOfflineNums();		onNums.setType("online");		onNums.setNum(onlineNum);		OnlineOfflineNums offNums = new OnlineOfflineNums();		offNums.setType("offline");		offNums.setNum(offlineNum);		onlineOfflineNums.add(onNums);		onlineOfflineNums.add(offNums);		return onlineOfflineNums;	}		}