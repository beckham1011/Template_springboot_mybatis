<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.bjjoy.bms.setting.persist.mapper.MaintainrecordDao">
	
	<parameterMap id="pm_maintainrecord" type="cn.bjjoy.bms.setting.persist.model.Maintainrecord">
		<parameter property="id" javaType="int" jdbcType="INTEGER" />
		<parameter property="startTime" javaType="String" jdbcType="VARCHAR" />
		<parameter property="endTime" javaType="String" jdbcType="VARCHAR" />
		<parameter property="method" javaType="String" jdbcType="VARCHAR" />
		<parameter property="maintainPer" javaType="String" jdbcType="VARCHAR" />
		<parameter property="Describe" javaType="String" jdbcType="VARCHAR" />
		<parameter property="results" javaType="String" jdbcType="VARCHAR" />
		<parameter property="money" javaType="String" jdbcType="VARCHAR" />
		<parameter property="DeclarationRecordId" javaType="int" jdbcType="INTEGER" />
		<parameter property="reason" javaType="String" jdbcType="VARCHAR" />
	</parameterMap>
	
	<resultMap id="rm_maintainrecord" type="cn.bjjoy.bms.setting.persist.model.Maintainrecord">
		<result property="id" column="id" javaType="int" jdbcType="INTEGER" />
		<result property="startTime" column="start_time" javaType="String" jdbcType="VARCHAR" />
		<result property="endTime" column="end_time" javaType="String" jdbcType="VARCHAR" />
		<result property="method" column="method" javaType="String" jdbcType="VARCHAR" />
		<result property="maintainPer" column="maintain_per" javaType="String" jdbcType="VARCHAR" />
		<result property="Describe" column="Describe" javaType="String" jdbcType="VARCHAR" />
		<result property="results" column="results" javaType="String" jdbcType="VARCHAR" />
		<result property="money" column="money" javaType="String" jdbcType="VARCHAR" />
		<result property="DeclarationRecordId" column="DeclarationRecord_id" javaType="int" jdbcType="INTEGER" />
		<result property="reason" column="reason" javaType="String" jdbcType="VARCHAR" />
	</resultMap>

	<insert id="save" parameterMap="pm_maintainrecord" useGeneratedKeys="true" keyProperty="id" >
		insert into maintainrecord
		<trim prefix="(" suffix=")" suffixOverrides="," >	
			<if test="id != null">id,</if>
			<if test="startTime != null">start_time,</if>
			<if test="endTime != null">end_time,</if>
			<if test="method != null">method,</if>
			<if test="maintainPer != null">maintain_per,</if>
			<if test="Describe != null">Describe,</if>
			<if test="results != null">results,</if>
			<if test="money != null">money,</if>
			<if test="DeclarationRecordId != null">DeclarationRecord_id,</if>
			<if test="reason != null">reason</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides="," >
			<if test="id != null">#{id},</if>
			<if test="startTime != null">#{startTime},</if>
			<if test="endTime != null">#{endTime},</if>
			<if test="method != null">#{method},</if>
			<if test="maintainPer != null">#{maintainPer},</if>
			<if test="Describe != null">#{Describe},</if>
			<if test="results != null">#{results},</if>
			<if test="money != null">#{money},</if>
			<if test="DeclarationRecordId != null">#{DeclarationRecordId},</if>
			<if test="reason != null">#{reason}</if>
		</trim>
	</insert>
		
	<delete id="deleteOne" parameterType="java.lang.String">
		DELETE FROM maintainrecord WHERE maintainrecord.id = #{id}
	</delete>
	
	<delete id="delete" parameterType="map">
		DELETE FROM maintainrecord
		<where>
			<include refid="sql_where" />
		</where>
	</delete>

	<select id="queryOne" parameterType="java.lang.String" resultMap="rm_maintainrecord">
		<include refid="sql_select"/>
		WHERE maintainrecord.id = #{id}
	</select>
	
	<select id="queryList" parameterType="map" resultMap="rm_maintainrecord">
		<include refid="sql_select" />
		<where>
			<include refid="sql_where" />
		</where>
		<include refid="sql_order" />
		<include refid="sql_page" />
	</select>
	
	<select id="queryListCount" parameterType="map" resultType="long">
		SELECT COUNT(0) FROM maintainrecord
		<where>
			<include refid="sql_where" />
		</where>
	</select>
	
	<update id="updateOne" parameterType="map">
		UPDATE maintainrecord
		<set>
		<if test="_parameter.containsKey('startTime')">
		<choose>
            <when test="startTime == null or startTime == ''">
			start_time = NULL,
            </when>
            <otherwise>
			start_time = #{startTime},
            </otherwise>
        </choose>
		</if>
		<if test="_parameter.containsKey('endTime')">
		<choose>
            <when test="endTime == null or endTime == ''">
			end_time = NULL,
            </when>
            <otherwise>
			end_time = #{endTime},
            </otherwise>
        </choose>
		</if>
		<if test="_parameter.containsKey('method')">
		<choose>
            <when test="method == null or method == ''">
			method = NULL,
            </when>
            <otherwise>
			method = #{method},
            </otherwise>
        </choose>
		</if>
		<if test="_parameter.containsKey('maintainPer')">
		<choose>
            <when test="maintainPer == null or maintainPer == ''">
			maintain_per = NULL,
            </when>
            <otherwise>
			maintain_per = #{maintainPer},
            </otherwise>
        </choose>
		</if>
		<if test="_parameter.containsKey('Describe')">
		<choose>
            <when test="Describe == null or Describe == ''">
			Describe = NULL,
            </when>
            <otherwise>
			Describe = #{Describe},
            </otherwise>
        </choose>
		</if>
		<if test="_parameter.containsKey('results')">
		<choose>
            <when test="results == null or results == ''">
			results = NULL,
            </when>
            <otherwise>
			results = #{results},
            </otherwise>
        </choose>
		</if>
		<if test="_parameter.containsKey('money')">
		<choose>
            <when test="money == null or money == ''">
			money = NULL,
            </when>
            <otherwise>
			money = #{money},
            </otherwise>
        </choose>
		</if>
		<if test="_parameter.containsKey('DeclarationRecordId')">
		<choose>
            <when test="DeclarationRecordId == null">
			DeclarationRecord_id = NULL,
            </when>
            <otherwise>
			DeclarationRecord_id = #{DeclarationRecordId},
            </otherwise>  
        </choose>
		</if>
		<if test="_parameter.containsKey('reason')">
		<choose>
            <when test="reason == null or reason == ''">
			reason = NULL
            </when>
            <otherwise>
			reason = #{reason}
            </otherwise>
        </choose>
		</if>
		</set>
		<where>
		id = #{id}
		</where>
	</update>

	<update id="update" parameterType="map">
		UPDATE maintainrecord
		<set>
		<if test="_parameter.containsKey('startTimeAnw')">
		<choose>
            <when test="startTimeAnw == null or startTimeAnw == ''">
			start_time = NULL,
            </when>
            <otherwise>
			start_time = #{startTimeAnw},
            </otherwise>  
        </choose>
		</if>
		<if test="_parameter.containsKey('endTimeAnw')">
		<choose>
            <when test="endTimeAnw == null or endTimeAnw == ''">
			end_time = NULL,
            </when>
            <otherwise>
			end_time = #{endTimeAnw},
            </otherwise>  
        </choose>
		</if>
		<if test="_parameter.containsKey('methodAnw')">
		<choose>
            <when test="methodAnw == null or methodAnw == ''">
			method = NULL,
            </when>
            <otherwise>
			method = #{methodAnw},
            </otherwise>  
        </choose>
		</if>
		<if test="_parameter.containsKey('maintainPerAnw')">
		<choose>
            <when test="maintainPerAnw == null or maintainPerAnw == ''">
			maintain_per = NULL,
            </when>
            <otherwise>
			maintain_per = #{maintainPerAnw},
            </otherwise>  
        </choose>
		</if>
		<if test="_parameter.containsKey('DescribeAnw')">
		<choose>
            <when test="DescribeAnw == null or DescribeAnw == ''">
			Describe = NULL,
            </when>
            <otherwise>
			Describe = #{DescribeAnw},
            </otherwise>  
        </choose>
		</if>
		<if test="_parameter.containsKey('resultsAnw')">
		<choose>
            <when test="resultsAnw == null or resultsAnw == ''">
			results = NULL,
            </when>
            <otherwise>
			results = #{resultsAnw},
            </otherwise>  
        </choose>
		</if>
		<if test="_parameter.containsKey('moneyAnw')">
		<choose>
            <when test="moneyAnw == null or moneyAnw == ''">
			money = NULL,
            </when>
            <otherwise>
			money = #{moneyAnw},
            </otherwise>  
        </choose>
		</if>
		<if test="_parameter.containsKey('DeclarationRecordIdAnw')">
		<choose>
            <when test="DeclarationRecordIdAnw == null">
			DeclarationRecord_id = NULL,
            </when>
            <otherwise>
			DeclarationRecord_id = #{DeclarationRecordIdAnw},
            </otherwise>  
        </choose>
		</if>
		<if test="_parameter.containsKey('reasonAnw')">
		<choose>
            <when test="reasonAnw == null or reasonAnw == ''">
			reason = NULL
            </when>
            <otherwise>
			reason = #{reasonAnw}
            </otherwise>  
        </choose>
		</if>
		</set>
		<where>
			<include refid="sql_where"/>
		</where>
	</update>
	
	<sql id="sql_select">
		<![CDATA[
		SELECT 
			maintainrecord.id,
			maintainrecord.start_time,
			maintainrecord.end_time,
			maintainrecord.method,
			maintainrecord.maintain_per,
			maintainrecord.Describe,
			maintainrecord.results,
			maintainrecord.money,
			maintainrecord.DeclarationRecord_id,
			maintainrecord.reason
		FROM maintainrecord
		]]>
	</sql>

	<sql id="sql_where">
		<if test="id != null and id != ''">
		<![CDATA[AND maintainrecord.id = #{id}]]>
		</if>
		<if test="id == null or id == ''">
		<if test="idAst != null and idAst != ''">
			<![CDATA[AND maintainrecord.id >= #{idAst}]]>
		</if>
		<if test="idAed != null and idAed != ''">
			<![CDATA[AND maintainrecord.id <= #{idAed}]]>
		</if>
		<if test="ids != null">
			AND maintainrecord.id IN
			<foreach collection="ids" index="index" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="idAlk != null and idAlk != ''">
			<![CDATA[AND CAST(maintainrecord.id AS CHAR) LIKE CONCAT('%',#{idAlk},'%')]]>
		</if>
		</if>
		<if test="startTime != null and startTime != ''">
			<![CDATA[AND maintainrecord.start_time = #{startTime}]]>
		</if>
		<if test="startTime == null or startTime == ''">
			<if test="startTimeAlk != null and startTimeAlk != ''">
				<![CDATA[AND maintainrecord.start_time LIKE CONCAT('%',#{startTimeAlk},'%')]]>
			</if>
			<if test="startTimes != null">
				AND maintainrecord.start_time IN 
				<foreach collection="startTimes" index="index" item="item" open="(" separator="," close=")">   
					#{item}
				</foreach>
			</if>
		</if>
		<if test="endTime != null and endTime != ''">
			<![CDATA[AND maintainrecord.end_time = #{endTime}]]>
		</if>
		<if test="endTime == null or endTime == ''">
			<if test="endTimeAlk != null and endTimeAlk != ''">
				<![CDATA[AND maintainrecord.end_time LIKE CONCAT('%',#{endTimeAlk},'%')]]>
			</if>
			<if test="endTimes != null">
				AND maintainrecord.end_time IN 
				<foreach collection="endTimes" index="index" item="item" open="(" separator="," close=")">   
					#{item}
				</foreach>
			</if>
		</if>
		<if test="method != null and method != ''">
			<![CDATA[AND maintainrecord.method = #{method}]]>
		</if>
		<if test="method == null or method == ''">
			<if test="methodAlk != null and methodAlk != ''">
				<![CDATA[AND maintainrecord.method LIKE CONCAT('%',#{methodAlk},'%')]]>
			</if>
			<if test="methods != null">
				AND maintainrecord.method IN 
				<foreach collection="methods" index="index" item="item" open="(" separator="," close=")">   
					#{item}
				</foreach>
			</if>
		</if>
		<if test="maintainPer != null and maintainPer != ''">
			<![CDATA[AND maintainrecord.maintain_per = #{maintainPer}]]>
		</if>
		<if test="maintainPer == null or maintainPer == ''">
			<if test="maintainPerAlk != null and maintainPerAlk != ''">
				<![CDATA[AND maintainrecord.maintain_per LIKE CONCAT('%',#{maintainPerAlk},'%')]]>
			</if>
			<if test="maintainPers != null">
				AND maintainrecord.maintain_per IN 
				<foreach collection="maintainPers" index="index" item="item" open="(" separator="," close=")">   
					#{item}
				</foreach>
			</if>
		</if>
		<if test="Describe != null and Describe != ''">
			<![CDATA[AND maintainrecord.Describe = #{Describe}]]>
		</if>
		<if test="Describe == null or Describe == ''">
			<if test="DescribeAlk != null and DescribeAlk != ''">
				<![CDATA[AND maintainrecord.Describe LIKE CONCAT('%',#{DescribeAlk},'%')]]>
			</if>
			<if test="Describes != null">
				AND maintainrecord.Describe IN 
				<foreach collection="Describes" index="index" item="item" open="(" separator="," close=")">   
					#{item}
				</foreach>
			</if>
		</if>
		<if test="results != null and results != ''">
			<![CDATA[AND maintainrecord.results = #{results}]]>
		</if>
		<if test="results == null or results == ''">
			<if test="resultsAlk != null and resultsAlk != ''">
				<![CDATA[AND maintainrecord.results LIKE CONCAT('%',#{resultsAlk},'%')]]>
			</if>
			<if test="resultss != null">
				AND maintainrecord.results IN 
				<foreach collection="resultss" index="index" item="item" open="(" separator="," close=")">   
					#{item}
				</foreach>
			</if>
		</if>
		<if test="money != null and money != ''">
			<![CDATA[AND maintainrecord.money = #{money}]]>
		</if>
		<if test="money == null or money == ''">
			<if test="moneyAlk != null and moneyAlk != ''">
				<![CDATA[AND maintainrecord.money LIKE CONCAT('%',#{moneyAlk},'%')]]>
			</if>
			<if test="moneys != null">
				AND maintainrecord.money IN 
				<foreach collection="moneys" index="index" item="item" open="(" separator="," close=")">   
					#{item}
				</foreach>
			</if>
		</if>
		<if test="DeclarationRecordId != null and DeclarationRecordId != ''">
		<![CDATA[AND maintainrecord.DeclarationRecord_id = #{DeclarationRecordId}]]>
		</if>
		<if test="DeclarationRecordId == null or DeclarationRecordId == ''">
		<if test="DeclarationRecordIdAst != null and DeclarationRecordIdAst != ''">
			<![CDATA[AND maintainrecord.DeclarationRecord_id >= #{DeclarationRecordIdAst}]]>
		</if>
		<if test="DeclarationRecordIdAed != null and DeclarationRecordIdAed != ''">
			<![CDATA[AND maintainrecord.DeclarationRecord_id <= #{DeclarationRecordIdAed}]]>
		</if>
		<if test="DeclarationRecordIds != null">
			AND maintainrecord.DeclarationRecord_id IN
			<foreach collection="DeclarationRecordIds" index="index" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="DeclarationRecordIdAlk != null and DeclarationRecordIdAlk != ''">
			<![CDATA[AND CAST(maintainrecord.DeclarationRecord_id AS CHAR) LIKE CONCAT('%',#{DeclarationRecordIdAlk},'%')]]>
		</if>
		</if>
		<if test="reason != null and reason != ''">
			<![CDATA[AND maintainrecord.reason = #{reason}]]>
		</if>
		<if test="reason == null or reason == ''">
			<if test="reasonAlk != null and reasonAlk != ''">
				<![CDATA[AND maintainrecord.reason LIKE CONCAT('%',#{reasonAlk},'%')]]>
			</if>
			<if test="reasons != null">
				AND maintainrecord.reason IN 
				<foreach collection="reasons" index="index" item="item" open="(" separator="," close=")">   
					#{item}
				</foreach>
			</if>
		</if>
	</sql>
	
	<sql id="sql_order">
		<trim prefix="ORDER BY" suffixOverrides=",">
		<if test="sort == 'id' and (order == 'asc' or order == 'desc')">
			maintainrecord.id ${order},
		</if>
		<if test="sort == 'startTime' and (order == 'asc' or order == 'desc')">
			maintainrecord.start_time ${order},
		</if>
		<if test="sort == 'endTime' and (order == 'asc' or order == 'desc')">
			maintainrecord.end_time ${order},
		</if>
		<if test="sort == 'method' and (order == 'asc' or order == 'desc')">
			maintainrecord.method ${order},
		</if>
		<if test="sort == 'maintainPer' and (order == 'asc' or order == 'desc')">
			maintainrecord.maintain_per ${order},
		</if>
		<if test="sort == 'Describe' and (order == 'asc' or order == 'desc')">
			maintainrecord.Describe ${order},
		</if>
		<if test="sort == 'results' and (order == 'asc' or order == 'desc')">
			maintainrecord.results ${order},
		</if>
		<if test="sort == 'money' and (order == 'asc' or order == 'desc')">
			maintainrecord.money ${order},
		</if>
		<if test="sort == 'DeclarationRecordId' and (order == 'asc' or order == 'desc')">
			maintainrecord.DeclarationRecord_id ${order},
		</if>
		<if test="sort == 'reason' and (order == 'asc' or order == 'desc')">
			maintainrecord.reason ${order}
		</if>
		</trim>
	</sql>
	
	<sql id="sql_page">
		<if test="page != null and rows != null" >
		limit #{rows} offset #{page}
		</if>
	</sql>
</mapper>